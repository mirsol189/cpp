#include <string>
#include <vector>

class Bike
{
	int gear;
public:
	// 그래서, 인자가 한개인 생성자를 변환 생성자 라고도 했습니다.
	// explicit 를 붙이면
	// 1. 복사 초기화를 사용할수 없게
	// 2. 변환의 용도로 사용할수 없다.
	explicit Bike(int n) : gear(n) {}
};

int main()
{
	// 인자가 한개인 생성자는 의미가 많습니다.
	// 1. int 인자 한개로 객체를 생성할수 있습니다.
	// 2. int => Bike 로 변환되게 해 줍니다. - 흔히 변환 생성자 라고 합니다.

	Bike b1(7);
	Bike b2 = 7;

	b1 = 3; // ok.. 왜 되나요 ? 3 => Bike 로 변경.
			// 1. 3을 가지고 Bike 생성자에 전달해서 Bike 객체를 생성
			//	  ==> 3을 가지고 만든 객체는 "임시객체"라고 하는데
			//			이문장에서만 사용됩니다.
			//			다음문장으로 가기전에 파괴 됩니다
			// 2. 생성된 객체를 b1에 대입

	// C#, Swift : Int 도 객체 입니다. 즉, 생성자가 있습니다
	// C++ : primitive type은 생성자가 존재 하지 않습니다  
	//		 단순하게 메모리만 잡힙니다.
	int n1 = 10;
	int n2 = 20;
	n1 = n2; // n1의 값이 n2값(20)으로 변경
}

